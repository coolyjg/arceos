var searchIndex = JSON.parse('{\
"allocator":{"doc":"","t":"EGIDDIINNNNSIDKLLLKLLKKKLKKLLKLLLLLLLLLKLLKKLLLLLLKLLLLLLLKLLLKKLLKLLLLLLLLLLLLLKKLLKL","n":["AllocError","AllocResult","BaseAllocator","BitmapPageAllocator","BuddyByteAllocator","ByteAllocator","IdAllocator","InvalidParam","MemoryOverlap","NoMemory","NotAllocated","PAGE_SIZE","PageAllocator","SlabByteAllocator","add_memory","add_memory","add_memory","add_memory","alloc","alloc","alloc","alloc_fixed_id","alloc_id","alloc_pages","alloc_pages","available","available_bytes","available_bytes","available_bytes","available_pages","available_pages","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","dealloc","dealloc","dealloc","dealloc_id","dealloc_pages","dealloc_pages","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_allocated","new","new","new","size","total_bytes","total_bytes","total_bytes","total_pages","total_pages","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","used","used_bytes","used_bytes","used_bytes","used_pages","used_pages"],"q":[[0,"allocator"]],"d":["The error type used for allocation.","A <code>Result</code> type with <code>AllocError</code> as the error type.","The base allocator inherited by other allocators.","","","Byte-granularity allocator.","Used to allocate unique IDs.","Invalid <code>size</code> or <code>align_pow2</code>. (e.g. unaligned)","Memory added by <code>add_memory</code> overlapped with existed memory.","No enough memory to allocate.","Deallocate an unallocated memory region.","","Page-granularity allocator.","","Add a free memory region to the allocator.","","","","Allocate memory with the given size (in bytes) and …","","","Mark the given <code>id</code> has been allocated and cannot be …","Allocate contiguous IDs with given count and alignment.","Allocate contiguous memory pages with given count and …","","Returns the number of available IDs.","Returns available memory size in bytes.","","","Returns the number of available memory pages.","","","","","","","","","","Deallocate memory at the given position, size, and …","","","Deallocate contiguous IDs with given position and count.","Deallocate contiguous memory pages with given position and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the allocator with a free memory region.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the given <code>id</code> was allocated.","","","","Returns the maximum number of supported IDs.","Returns total memory size in bytes.","","","Returns the total number of memory pages.","","","","","","","","","","","","","","Returns the number of allocated IDs.","Returns allocated memory size in bytes.","","","Returns the number of allocated memory pages.",""],"i":[0,0,0,0,0,0,0,6,6,6,6,12,0,0,13,3,4,5,14,4,5,15,15,12,3,15,14,4,5,12,3,3,4,5,6,3,4,5,6,14,4,5,15,12,3,6,3,4,5,6,13,3,4,5,3,4,5,6,15,3,4,5,15,14,4,5,12,3,3,4,5,6,3,4,5,6,3,4,5,6,15,14,4,5,12,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],2],[[3,1,1],2],[[4,1,1],2],[[5,1,1],2],[[1,1],[[2,[1]]]],[[4,1,1],[[2,[1]]]],[[5,1,1],[[2,[1]]]],[1,2],[[1,1],[[2,[1]]]],[[1,1],[[2,[1]]]],[[3,1,1],[[2,[1]]]],[[],1],[[],1],[4,1],[5,1],[[],1],[3,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1,1]],[[4,1,1,1]],[[5,1,1,1]],[[1,1]],[[1,1]],[[3,1,1]],[[6,7],8],[[]],[[]],[[]],[[]],[[1,1]],[[3,1,1]],[[4,1,1]],[[5,1,1]],[[]],[[]],[[]],[[]],[1,9],[[],3],[[],4],[[],5],[[],1],[[],1],[4,1],[5,1],[[],1],[3,1],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],1],[[],1],[4,1],[5,1],[[],1],[3,1]],"c":[],"p":[[15,"usize"],[6,"AllocResult"],[3,"BitmapPageAllocator"],[3,"BuddyByteAllocator"],[3,"SlabByteAllocator"],[4,"AllocError"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"PageAllocator"],[8,"BaseAllocator"],[8,"ByteAllocator"],[8,"IdAllocator"]]},\
"arm_gic":{"doc":"","t":"ANNNDDNRERELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["gic_v2","ActiveHigh","ActiveLow","Edge","GicCpuInterface","GicDistributor","Level","PPI_BASE","Polarity","SPI_BASE","TriggerMode","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","configure_interrupt","cpu_num","eoi","from","from","from","from","handle_irq","iar","init","init","into","into","into","into","max_irqs","new","new","set_enable","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"arm_gic"],[1,"arm_gic::gic_v2"]],"d":["ARM Generic Interrupt Controller v2.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,4,4,3,0,0,3,0,0,0,0,3,4,1,5,3,4,1,5,1,1,5,3,4,1,5,5,5,1,5,3,4,1,5,1,1,5,1,3,4,1,5,3,4,1,5,3,4,1,5],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,3,4]],[1,2],[[5,6]],[[]],[[]],[[]],[[]],[[5,7]],[5,6],[1],[5],[[]],[[]],[[]],[[]],[1,2],[8,1],[8,5],[[1,2,9]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11]],"c":[],"p":[[3,"GicDistributor"],[15,"usize"],[4,"TriggerMode"],[4,"Polarity"],[3,"GicCpuInterface"],[15,"u32"],[8,"FnOnce"],[15,"u8"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"axalloc":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLL","n":["GlobalAllocator","GlobalPage","add_memory","alloc","alloc","alloc","alloc_contiguous","alloc_pages","alloc_zero","as_mut_ptr","as_ptr","as_slice","as_slice_mut","available_bytes","available_pages","borrow","borrow","borrow_mut","borrow_mut","dealloc","dealloc","dealloc_pages","drop","fill","fmt","from","from","global_add_memory","global_allocator","global_init","init","into","into","new","size","start_paddr","start_vaddr","try_from","try_from","try_into","try_into","type_id","type_id","used_bytes","used_pages","zero"],"q":[[0,"axalloc"]],"d":["","A safe wrapper of contiguous 4K-sized pages.","","","","Allocate one 4K-sized page.","Allocate contiguous 4K-sized pages.","","Allocate one 4K-sized page and fill with zero.","Convert to a mutable raw pointer.","Convert to a raw pointer.","Forms a slice that can read data.","Forms a mutable slice that can write data.","","","","","","","","","","","Fill <code>self</code> with <code>byte</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the total size (in bytes) of these page(s).","Get the start physical address of this page.","Get the start virtual address of this page.","","","","","","","","","Fill <code>self</code> with zero."],"i":[0,0,1,1,1,6,6,1,6,6,6,6,6,1,1,1,6,1,6,1,1,1,6,6,6,1,6,0,0,0,1,1,6,1,6,6,6,1,6,1,6,1,6,1,1,6],"f":[0,0,[[1,2,2],3],[[1,2,2],[[3,[2]]]],[[1,4],5],[[],[[7,[6]]]],[[2,2],[[7,[6]]]],[[1,2,2],[[3,[2]]]],[[],[[7,[6]]]],[6,5],[6,5],[6],[6],[1,2],[1,2],[[]],[[]],[[]],[[]],[[1,2,2,2]],[[1,5,4]],[[1,2,2]],[6],[[6,5]],[[6,8],9],[[]],[[]],[[2,2],3],[[],1],[[2,2]],[[1,2,2]],[[]],[[]],[[],1],[6,2],[[6,10],11],[6,12],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[1,2],[1,2],[6]],"c":[],"p":[[3,"GlobalAllocator"],[15,"usize"],[6,"AllocResult"],[3,"Layout"],[15,"u8"],[3,"GlobalPage"],[6,"AxResult"],[3,"Formatter"],[6,"Result"],[8,"FnOnce"],[3,"PhysAddr"],[3,"VirtAddr"],[4,"Result"],[3,"TypeId"]]},\
"axconfig":{"doc":"","t":"RRRRRRRRRRRRRR","n":["ARCH","KERNEL_BASE_PADDR","KERNEL_BASE_VADDR","MMIO_REGIONS","PHYS_MEMORY_BASE","PHYS_MEMORY_END","PHYS_MEMORY_SIZE","PHYS_VIRT_OFFSET","PLATFORM","SMP","TASK_STACK_SIZE","TICKS_PER_SEC","TIMER_FREQUENCY","VIRTIO_MMIO_REGIONS"],"q":[[0,"axconfig"]],"d":["","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[]},\
"axdisplay":{"doc":"","t":"IDLLLLKMMKLFFLMKFLKLLLLM","n":["DisplayDriverOps","DisplayInfo","borrow","borrow_mut","clone","clone_into","fb","fb_base_vaddr","fb_size","flush","fmt","framebuffer_flush","framebuffer_info","from","height","info","init_display","into","need_flush","to_owned","try_from","try_into","type_id","width"],"q":[[0,"axdisplay"]],"d":["","","","","","","","frame buffer base virtual address","frame buffer size","","","","","Returns the argument unchanged.","visible height","","","Calls <code>U::from(self)</code>.","","","","","","visible width"],"i":[0,0,1,1,1,1,11,1,1,11,1,0,0,1,1,11,0,1,11,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[]],[[],2],0,0,[[],[[4,[3]]]],[[1,5],[[4,[6]]]],[[],7],[[],1],[[]],0,[[],1],[8],[[]],[[],9],[[]],[[],4],[[],4],[[],10],0],"c":[],"p":[[3,"DisplayInfo"],[3,"FrameBuffer"],[4,"DevError"],[4,"Result"],[3,"Formatter"],[3,"Error"],[15,"isize"],[3,"DisplayDevices"],[15,"bool"],[3,"TypeId"],[8,"DisplayDriverOps"]]},\
"axdriver":{"doc":"","t":"DDDDGGMOOLLLLLLLLMOOLLLLFLLLLLLLLLLMOOLLLLLLLLLLLL","n":["AllDevices","BlockDevices","DisplayDevices","NetDevices","VirtIoGpuDev","VirtIoNetDev","block","block_devices_enumerate","block_devices_for_each","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","display","display_devices_enumerate","display_devices_for_each","from","from","from","from","init_drivers","into","into","into","into","is_empty","is_empty","is_empty","len","len","len","net","net_devices_enumerate","net_devices_for_each","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"axdriver"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the tuple has no field.","Whether the tuple has no field.","Whether the tuple has no field.","Number of items in the tuple.","Number of items in the tuple.","Number of items in the tuple.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,0,1,2,4,5,1,2,4,5,1,0,0,1,2,4,5,0,1,2,4,5,2,4,5,2,4,5,1,0,0,1,2,4,5,1,2,4,5,1,2,4,5],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],1],[[]],[[]],[[]],[[]],[2,3],[4,3],[5,3],[2,6],[4,6],[5,6],0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8]],"c":[],"p":[[3,"AllDevices"],[3,"BlockDevices"],[15,"bool"],[3,"NetDevices"],[3,"DisplayDevices"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"axerrno":{"doc":"","t":"NNEGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEGNNNNNNNNNNLLOOLLLLLLLLLLLLLLLLLLLLLL","n":["Again","AlreadyExists","AxError","AxResult","BadAddress","BadState","ConnectionRefused","DirectoryNotEmpty","E2BIG","EACCES","EAGAIN","EBADF","EBUSY","ECHILD","ECONNREFUSED","EDEADLK","EDOM","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENAMETOOLONG","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOMEM","ENOSPC","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTTY","ENXIO","EPERM","EPIPE","ERANGE","EROFS","ESPIPE","ESRCH","ETXTBSY","EXDEV","InvalidData","InvalidInput","Io","IsADirectory","LinuxError","LinuxResult","NoMemory","NotADirectory","NotConnected","NotFound","PermissionDenied","ResourceBusy","StorageFull","UnexpectedEof","Unsupported","WriteZero","as_str","as_str","ax_err","ax_err_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone","code","eq","eq","fmt","fmt","from","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"axerrno"]],"d":["Try again, often for non-blocking APIs.","An entity already exists, often a file.","The error type used by ArceOS.","A <code>Result</code> type with <code>AxError</code> as the error type.","Bad address.","Bad internal state.","The connection was refused by the remote server,","A non-empty directory was specified where an empty …","Argument list too long","Permission denied","Try again","Bad file number","Device or resource busy","No child processes","Connection refused","Resource deadlock would occur","Math argument out of domain of func","File exists","Bad address","File too large","Interrupted system call","Invalid argument","I/O error","Is a directory","Too many open files","Too many links","File name too long","File table overflow","No such device","No such file or directory","Exec format error","No record locks available","Out of memory","No space left on device","Invalid system call number","Block device required","Transport endpoint is not connected","Not a directory","Directory not empty","Not a typewriter","No such device or address","Operation not permitted","Broken pipe","Math result not representable","Read-only file system","Illegal seek","No such process","Text file busy","Cross-device link","Data not valid for the operation were encountered.","Invalid parameter/argument.","Input/output error.","The filesystem object is, unexpectedly, a directory.","Linux error codes defination.","A <code>Result</code> type with <code>LinuxError</code> as the error type.","Not enough space/cannot allocate memory.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","The requested entity is not found.","The operation lacked the necessary privileges to complete.","Device or resource is busy.","The underlying storage (typically, a filesystem) is full.","An error returned when an operation could not be completed …","This operation is unsupported or unimplemented.","An error returned when an operation could not be completed …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[3,3,0,0,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,1,3,0,0,1,3,1,3,1,3,1,1,3,1,3,1,1,3,1,3,1,3,1,3,1,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],0,0,[[]],[[]],[[]],[[]],[1,1],[3,3],[1,4],[[1,1],5],[[3,3],5],[[1,6],7],[[3,6],7],[[]],[3,1],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"c":[],"p":[[4,"LinuxError"],[15,"str"],[4,"AxError"],[15,"i32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"axfs":{"doc":"","t":"AAFDDDGDDGDLLLLLLLLLLLLLFLLLLLFFLLFLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFLLFFLFFLFLLLLLLLLLLLLLLLLLLLLLFLLGDDGGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["api","fops","init_filesystems","DirBuilder","DirEntry","File","FileType","Metadata","OpenOptions","Permissions","ReadDir","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","clone","clone_into","create","create","create","create_dir","create_dir_all","create_new","create_new","current_dir","default","file_name","file_type","file_type","flush","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","is_dir","is_file","len","metadata","metadata","new","new","next","open","open","options","path","permissions","raw_metadata","read","read","read","read_dir","read_to_string","recursive","remove_dir","remove_file","seek","set_current_dir","set_len","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","DirEntry","Directory","File","FileAttr","FilePerm","FileType","OpenOptions","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","create_dir","create_file","create_new","drop","drop","flush","fmt","from","from","from","get_attr","into","into","into","new","open","open_dir","open_dir_at","open_file_at","read","read","read_dir","remove_dir","remove_file","seek","to_owned","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write"],"q":[[0,"axfs"],[3,"axfs::api"],[105,"axfs::fops"]],"d":["<code>std::fs</code>-like high-level filesystem manipulation operations.","Low-level filesystem operations.","","A builder used to create directories in various manners.","Entries returned by the <code>ReadDir</code> iterator.","An object providing access to an open file on the …","A structure representing a type of file with accessors for …","Metadata information about a file.","Options and flags which can be used to configure how a …","Representation of the various permissions on a file.","Iterator over the entries in a directory.","Sets the option for the append mode.","","","","","","","","","","","","","Returns the canonical, absolute form of a path with all …","","","Opens a file in write-only mode.","Creates the specified directory with the options …","Sets the option to create a new file, or open it if it …","Creates a new, empty directory at the provided path.","Recursively create a directory and all of its parent …","Creates a new file in read-write mode; error if the file …","Sets the option to create a new file, failing if it …","Returns the current working directory as a <code>String</code>.","","Returns the bare file name of this directory entry without …","Returns the file type for the file that this entry points …","Returns the file type for this metadata.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if this metadata is for a directory. The …","Returns <code>true</code> if this metadata is for a regular file. The …","Returns the size of the file, in bytes, this metadata is …","Given a path, query the file system to get information …","Queries metadata about the underlying file.","Creates a new set of options with default mode/security …","Creates a blank new set of options ready for configuration.","","Attempts to open a file in read-only mode.","Opens a file at <code>path</code> with the options specified by <code>self</code>.","Returns a new OpenOptions object.","Returns the full path to the file that this entry …","Returns the permissions of the file this metadata is for.","","Read the entire contents of a file into a bytes vector.","","Sets the option for read access.","Returns an iterator over the entries within a directory.","Read the entire contents of a file into a string.","Indicates that directories should be created recursively, …","Removes an empty directory.","Removes a file from the filesystem.","","Changes the current working directory to the specified …","Truncates or extends the underlying file, updating the …","","Sets the option for truncating a previous file.","","","","","","","","","","","","","","","","","","","Write a slice as the entire contents of a file.","","sets the option for write access.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,2,15,9,7,11,8,2,15,9,7,11,8,2,0,2,2,7,8,2,0,0,7,2,0,8,9,9,11,7,9,11,8,2,15,9,7,11,8,2,15,9,7,11,8,2,15,11,11,11,0,7,8,2,15,7,2,7,9,11,11,0,7,2,0,0,8,0,0,7,0,7,2,2,15,9,7,11,8,2,15,9,7,11,8,2,15,9,7,11,8,2,0,7,2,0,0,0,0,0,0,0,26,29,27,26,29,27,26,26,26,26,27,27,26,29,27,29,26,29,27,26,29,29,27,26,26,29,27,27,27,29,26,27,27,27,29,26,29,26,29,27,26,29,27,26,29,27,26,29,26],"f":[0,0,[1],0,0,0,0,0,0,0,0,[[2,3],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[6,[5]]]],[2,2],[[]],[4,[[6,[7]]]],[[8,4],6],[[2,3],2],[4,6],[4,6],[4,[[6,[7]]]],[[2,3],2],[[],[[6,[5]]]],[[],8],[9,5],[9,10],[11,10],[7,6],[[9,12],13],[[11,12],13],[[8,12],13],[[2,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,3],[11,3],[11,14],[4,[[6,[11]]]],[7,[[6,[11]]]],[[],8],[[],2],[15,[[16,[[6,[9]]]]]],[4,[[6,[7]]]],[[2,4],[[6,[7]]]],[[],2],[9,5],[11,17],[11,18],[4,[[6,[[20,[19]]]]]],[7,[[6,[21]]]],[[2,3],2],[4,[[6,[15]]]],[4,[[6,[5]]]],[[8,3],8],[4,6],[4,6],[[7,22],[[6,[14]]]],[4,6],[[7,14],6],[[]],[[2,3],2],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[4,25],6],[7,[[6,[21]]]],[[2,3],2],0,0,0,0,0,0,0,[[26,3]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[[]],[[26,3]],[[27,4],6],[[27,4],[[6,[28]]]],[[26,3]],[29],[27],[29,6],[[26,12],13],[[]],[[]],[[]],[29,[[6,[18]]]],[[]],[[]],[[]],[[],26],[[4,26],[[6,[29]]]],[[4,26],[[6,[27]]]],[[27,4,26],[[6,[27]]]],[[27,4,26],[[6,[29]]]],[29,[[6,[21]]]],[[26,3]],[27,[[6,[21]]]],[[27,4],6],[[27,4],6],[[29,22],[[6,[14]]]],[[]],[[29,14],6],[[26,3]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[29,[[6,[21]]]],[[26,3]]],"c":[],"p":[[3,"RamDisk"],[3,"OpenOptions"],[15,"bool"],[15,"str"],[3,"String"],[6,"AxResult"],[3,"File"],[3,"DirBuilder"],[3,"DirEntry"],[6,"FileType"],[3,"Metadata"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"ReadDir"],[4,"Option"],[6,"Permissions"],[6,"FileAttr"],[15,"u8"],[3,"Vec"],[15,"usize"],[4,"SeekFrom"],[4,"Result"],[3,"TypeId"],[8,"AsRef"],[3,"OpenOptions"],[3,"Directory"],[6,"VfsNodeRef"],[3,"File"]]},\
"axfs_devfs":{"doc":"Device filesystem.","t":"DDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DeviceFileSystem","DirNode","NullDev","ZeroDev","add","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","create","create","default","from","from","from","from","fsync","get_attr","get_attr","get_attr","into","into","into","into","lookup","lookup","lookup","mkdir","mkdir","mount","new","parent","read_at","read_at","read_at","read_dir","read_dir","read_dir","remove","remove","remove","root_dir","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_at","write_at","write_at"],"q":[[0,"axfs_devfs"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,4,1,7,8,4,1,7,8,4,1,7,8,4,1,7,8,4,1,1,7,8,1,7,8,4,1,7,8,1,4,4,4,1,1,7,8,1,7,8,1,7,8,4,1,7,8,1,7,8,4,1,7,8,4,1,7,8,4,1,7,8],"f":[0,0,0,0,[[1,2,3]],[[4,2,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,5],6],[[7,2,5],6],[[8,2,5],6],[[],4],[[]],[[]],[[]],[[]],[1,6],[1,[[6,[9]]]],[7,[[6,[9]]]],[8,[[6,[9]]]],[[]],[[]],[[]],[[]],[[[10,[1]],2],[[6,[3]]]],[[[10,[7]],2],[[6,[3]]]],[[[10,[8]],2],[[6,[3]]]],[[[10,[1]],2],[[10,[1]]]],[[4,2],[[10,[1]]]],[[4,2,3],6],[[],4],[1,[[11,[3]]]],[[1,12],[[6,[13]]]],[[7,12],[[6,[13]]]],[[8,12],[[6,[13]]]],[[1,13],[[6,[13]]]],[[7,13],[[6,[13]]]],[[8,13],[[6,[13]]]],[[1,2],6],[[7,2],6],[[8,2],6],[4,3],[[1,12],6],[[7,12],6],[[8,12],6],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[1,12],[[6,[13]]]],[[7,12],[[6,[13]]]],[[8,12],[[6,[13]]]]],"c":[],"p":[[3,"DirNode"],[15,"str"],[6,"VfsNodeRef"],[3,"DeviceFileSystem"],[4,"VfsNodeType"],[6,"VfsResult"],[3,"NullDev"],[3,"ZeroDev"],[3,"VfsNodeAttr"],[3,"Arc"],[4,"Option"],[15,"u64"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"axfs_vfs":{"doc":"Virtual filesystem interfaces.","t":"NNNNNDSSSSSSSSSNNDGDIDGEIGALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["BlockDevice","CharDevice","Dir","Fifo","File","FileSystemInfo","GROUP_EXEC","GROUP_READ","GROUP_WRITE","OTHER_EXEC","OTHER_READ","OTHER_WRITE","OWNER_EXEC","OWNER_READ","OWNER_WRITE","Socket","SymLink","VfsDirEntry","VfsError","VfsNodeAttr","VfsNodeOps","VfsNodePerm","VfsNodeRef","VfsNodeType","VfsOps","VfsResult","__priv","all","all","as_char","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","blocks","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","complement","contains","contains","create","default","default_dir","default_file","difference","empty","empty","entry_type","eq","extend","file_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","fsync","get_attr","impl_vfs_dir_default","impl_vfs_non_dir_default","insert","insert","intersection","intersects","intersects","into","into","into","into","into","into_iter","is_all","is_all","is_dir","is_dir","is_empty","is_empty","is_file","is_file","iter","iter","iter_names","iter_names","lookup","mount","name_as_bytes","new","new","new_dir","new_file","not","open","owner_executable","owner_readable","owner_writable","parent","path","perm","read_at","read_dir","release","remove","remove","remove","root_dir","rwx_buf","set","set","set_perm","size","statfs","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","toggle","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","umount","union","write_at","Arc","as_ptr","as_ref","assume_init","assume_init","ax_err","borrow","borrow","borrow_mut","cause","clone","clone_into","cmp","decrement_strong_count","default","deref","description","downcast","downcast_unchecked","downgrade","drop","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","ge","get_mut","get_mut_unchecked","gt","hash","increment_strong_count","into","into_inner","into_raw","le","lt","make_mut","ne","new","new_cyclic","new_uninit","new_uninit_slice","new_zeroed","new_zeroed_slice","partial_cmp","pin","provide","provide","ptr_eq","source","strong_count","to_owned","to_string","try_from","try_from","try_into","try_new","try_new_uninit","try_new_zeroed","try_pin","try_unwrap","type_id","unwrap_or_clone","weak_count","canonicalize"],"q":[[0,"axfs_vfs"],[173,"axfs_vfs::__priv"],[251,"axfs_vfs::path"]],"d":["Block device","Character device","Directory","FIFO (named pipe)","Regular file","","Group has execute permission.","Group has read permission.","Group has write permission.","Others have execute permission.","Others have read permission.","Others have write permission.","Owner has execute permission.","Owner has read permission.","Owner has write permission.","Socket","Symbolic link","Directory entry.","","File (inode) attribute","File (inode) operations.","File (inode) permission mode.","","File (inode) type.","Filesystem operations.","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Create a new node with given <code>path</code> in the directory. Return …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Format the filesystem.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","","Flush the file, i.e. write all dirty data to disk.","Get the attributes of the node.","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","","","","Returns <code>true</code> if no flags are currently stored.","","","","","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","","Lookup the node with given <code>path</code> in the directory, return …","Do something when the filesystem is mounted.","","","","","","Returns the complement of this set of flags.","Do something when the node is opened.","","","","Get the parent directory of this directory. Return <code>None</code> if …","","","Read data from the file at given offset.","Read directory entries into <code>dirents</code>, starting from …","Do something when the node is closed.","Remove the node with given <code>path</code> in the directory.","","Removes the specified flags in-place.","Get the root directory of the filesystem.","","","Inserts or removes the specified flags depending on the …","","","Get the attributes of the filesystem.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Truncate the file to the given size.","","","","","","","","","","","","","","","","Do something when the filesystem is unmounted.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Write data to the file at given offset.","A thread-safe reference-counting pointer. ‘Arc’ stands …","Provides a raw pointer to the data.","","Converts to <code>Arc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;T&gt;</code>.","","","","","","Makes a clone of the <code>Arc</code> pointer.","","Comparison for two <code>Arc</code>s.","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","","","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Downcasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …","Creates a new <code>Weak</code> pointer to this allocation.","Drops the <code>Arc</code>.","Equality for two <code>Arc</code>s.","","","","Returns the argument unchanged.","Move a boxed object to a new, reference-counted allocation.","Create an atomically reference-counted pointer from a …","Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …","Converts an atomically reference-counted string slice into …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","","Converts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Allocate a reference-counted slice and move <code>v</code>’s items …","Takes each element in the <code>Iterator</code> and collects it into an …","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference into the given <code>Arc</code>, without …","Greater-than comparison for two <code>Arc</code>s.","","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Calls <code>U::from(self)</code>.","Returns the inner value, if the <code>Arc</code> has exactly one strong …","Consumes the <code>Arc</code>, returning the wrapped pointer.","‘Less than or equal to’ comparison for two <code>Arc</code>s.","Less-than comparison for two <code>Arc</code>s.","Makes a mutable reference into the given <code>Arc</code>.","Inequality for two <code>Arc</code>s.","Constructs a new <code>Arc&lt;T&gt;</code>.","Constructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new atomically reference-counted slice with …","Partial comparison for two <code>Arc</code>s.","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","","","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","","Gets the number of strong (<code>Arc</code>) pointers to this …","","","","","","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","If we have the only reference to <code>T</code> then unwrap it. …","Gets the number of <code>Weak</code> pointers to this allocation.",""],"i":[2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1,1,1,5,18,10,5,1,2,18,10,5,1,2,5,1,2,5,1,2,1,1,1,52,10,1,1,1,1,1,10,2,1,5,5,1,1,1,1,1,2,53,18,10,5,1,2,1,1,1,1,1,1,1,1,1,52,52,0,0,1,1,1,1,1,18,10,5,1,2,1,1,1,5,2,1,1,5,2,1,1,1,1,52,53,10,10,5,5,5,1,52,1,1,1,52,0,5,52,52,52,52,1,1,53,1,1,1,5,5,53,1,1,1,5,1,2,1,1,52,18,10,5,1,2,18,10,5,1,2,18,10,5,1,2,53,1,52,0,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[2,3],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,4],[1,4],[[1,1],1],[[1,1]],[5,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[1,1],[2,2],[[]],[[]],[[]],[1,1],[[1,1],7],[[1,1],7],[[8,2],9],[[],10],[[],1],[[],1],[[1,1],1],[[],1],[[],1],[10,2],[[2,2],7],[[1,11]],[5,2],[[5,12],13],[[1,12],13],[[1,12],13],[[1,12],13],[[1,12],13],[[1,12],13],[[2,12],13],[[],9],[[]],[[]],[[]],[[]],[[]],[4,[[14,[1]]]],[4,[[14,[1]]]],[4,1],[4,1],[4,1],[4,1],[11,1],[8,[[14,[1]]]],[8,[[14,[1]]]],[[],9],[[],[[9,[5]]]],0,0,[[1,1]],[[1,1]],[[1,1],1],[[1,1],7],[[1,1],7],[[]],[[]],[[]],[[]],[[]],[1],[1,7],[1,7],[5,7],[2,7],[1,7],[1,7],[5,7],[2,7],[1],0,0,[1],[[15,8],[[9,[16]]]],[[8,16],9],[10],[[8,2],10],[[1,2,6,6],5],[[6,6],5],[[6,6],5],[1,1],[[],9],[1,7],[1,7],[1,7],[[],[[14,[16]]]],0,[5,1],[6,[[9,[17]]]],[17,[[9,[17]]]],[[],9],[8,9],[[1,1]],[[1,1]],[[],16],[1],[[1,1,7]],[[1,1,7]],[[5,1]],[5,6],[[],[[9,[18]]]],[[1,1],1],[[1,1]],[[1,1],1],[[]],[[]],[[]],[[1,1]],[[1,1]],[6,9],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],9],[[1,1],1],[6,[[9,[17]]]],0,[[[15,[21]]]],[[[15,[21]]],21],[15,15],[[[15,[22]]],15],0,[[]],[[[15,[21]]],21],[[]],[[[15,[[0,[23,21]]]]],[[14,[23]]]],[[[15,[21]]],[[15,[21]]]],[[]],[[[15,[[0,[24,21]]]],[15,[[0,[24,21]]]]],25],[[]],[[],[[15,[26]]]],[[[15,[21]]],21],[[[15,[[0,[23,21]]]]],8],[[[15,[27]]],[[19,[[15,[[0,[27,28,29]]]],[15,[27]]]]]],[[[15,[27]]],[[15,[[0,[27,28,29]]]]]],[[[15,[21]]],[[30,[21]]]],[[[15,[21]]]],[[[15,[[0,[[31,[[0,[[31,[[0,[[31,[[0,[31,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[31,[[0,[[31,[[0,[[31,[[0,[31,21]]]],21]]]],21]]]],21]]]]],7],[[[15,[[0,[32,21]]]],12],[[19,[33]]]],[[[15,[21]],12],[[19,[33]]]],[[[15,[[0,[34,21]]]],12],[[19,[33]]]],[[]],[[[36,[21,35]]],[[15,[21]]]],[[[38,[[0,[37,21]]]]],[[15,[[0,[37,21]]]]]],[39,[[15,[39]]]],[[[15,[8]]],15],[40,[[15,[8]]]],[[],15],[8,[[15,[8]]]],[41],[42,[[15,[39]]]],[[],15],[[[43,[35]]],15],[11,15],[[],[[15,[21]]]],[[[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]]],7],[[[15,[21]]],[[14,[21]]]],[[[15,[21]]],21],[[[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]]],7],[[[15,[[0,[45,21]]]],46]],[[]],[[]],[15,14],[[[15,[21]]]],[[[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]]],7],[[[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]]],7],[[[15,[47]]],47],[[[15,[[0,[[31,[[0,[[31,[[0,[[31,[[0,[31,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[31,[[0,[[31,[[0,[[31,[[0,[31,21]]]],21]]]],21]]]],21]]]]],7],[[],15],[48,15],[[],[[15,[22]]]],[17,15],[[],[[15,[22]]]],[17,15],[[[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]],[15,[[0,[[44,[[0,[[44,[[0,[[44,[[0,[44,21]]]],21]]]],21]]]],21]]]]],[[14,[25]]]],[[],[[49,[15]]]],[50],[[[15,[[0,[23,21]]]],50]],[[[15,[21]],[15,[21]]],7],[[[15,[[0,[23,21]]]]],[[14,[23]]]],[[[15,[21]]],17],[[]],[[],40],[15,[[19,[15]]]],[[],19],[[],19],[[],[[19,[15,51]]]],[[],[[19,[[15,[22]],51]]]],[[],[[19,[[15,[22]],51]]]],[[],[[19,[[49,[15]],51]]]],[15,[[19,[15]]]],[[],20],[[[15,[47]]],47],[[[15,[21]]],17],[8,40]],"c":[],"p":[[3,"VfsNodePerm"],[4,"VfsNodeType"],[15,"char"],[15,"u16"],[3,"VfsNodeAttr"],[15,"u64"],[15,"bool"],[15,"str"],[6,"VfsResult"],[3,"VfsDirEntry"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"Arc"],[6,"VfsNodeRef"],[15,"usize"],[3,"FileSystemInfo"],[4,"Result"],[3,"TypeId"],[8,"Sized"],[19,"MaybeUninit"],[8,"Error"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Any"],[8,"Send"],[8,"Sync"],[3,"Weak"],[8,"PartialEq"],[8,"Debug"],[3,"Error"],[8,"Display"],[3,"Global"],[3,"Box"],[8,"ToOwned"],[4,"Cow"],[3,"CStr"],[3,"String"],[15,"never"],[3,"CString"],[3,"Vec"],[8,"PartialOrd"],[8,"Hash"],[8,"Hasher"],[8,"Clone"],[8,"FnOnce"],[3,"Pin"],[3,"Demand"],[3,"AllocError"],[8,"VfsNodeOps"],[8,"VfsOps"]]},\
"axhal":{"doc":"","t":"AAAAAAAADDLLLLLLLFFFLLLLLLLFLMFMMMMMMMMMMMMMMFMMLLLLLLLFFFFFFFFFGFFFSSSDDRDSSDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLMLLFLLLLMLLLLLLLLLLLLLLLLLLLLLLFFRRRRRRGFFFFFFIK","n":["arch","console","cpu","irq","mem","misc","time","trap","TaskContext","TrapFrame","borrow","borrow","borrow_mut","borrow_mut","clone","default","default","disable_irqs","enable_irqs","flush_tlb","fmt","fmt","from","from","init","into","into","irqs_enabled","new","ra","read_page_table_root","regs","s0","s1","s10","s11","s2","s3","s4","s5","s6","s7","s8","s9","sepc","set_tap_vector_base","sp","sstatus","switch_to","try_from","try_from","try_into","try_into","type_id","type_id","wait_for_irqs","write_page_table_root","getchar","putchar","write_bytes","current_task_ptr","set_current_task_ptr","this_cpu_id","this_cpu_is_bsp","IrqHandler","dispatch_irq","register_handler","set_enable","DEVICE","EXECUTE","FREE","MemRegion","MemRegionFlags","PAGE_SIZE_4K","PhysAddr","READ","RESERVED","VirtAddr","WRITE","add","add","add_assign","add_assign","align_down","align_down","align_down_4k","align_down_4k","align_offset","align_offset","align_offset_4k","align_offset_4k","align_up","align_up","align_up_4k","align_up_4k","all","all","as_mut_ptr","as_ptr","as_usize","as_usize","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","complement","contains","contains","default","default","difference","empty","empty","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","insert","insert","intersection","intersects","intersects","into","into","into","into","into_iter","is_aligned","is_aligned","is_aligned_4k","is_aligned_4k","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","memory_regions","name","not","paddr","partial_cmp","partial_cmp","phys_to_virt","remove","remove","set","set","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","virt_to_phys","terminate","MICROS_PER_SEC","MILLIS_PER_SEC","NANOS_PER_MICROS","NANOS_PER_MILLIS","NANOS_PER_SEC","TIMER_IRQ_NUM","TimeValue","current_ticks","current_time","current_time_nanos","nanos_to_ticks","set_oneshot_timer","ticks_to_nanos","TrapHandler","handle_irq"],"q":[[0,"axhal"],[8,"axhal::arch"],[57,"axhal::console"],[60,"axhal::cpu"],[64,"axhal::irq"],[68,"axhal::mem"],[217,"axhal::misc"],[218,"axhal::time"],[231,"axhal::trap"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Get the current task pointer without preemption.","Set the current task pointer without preemption.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","","","Iterate over enabled flag values with their stringified …","","","Returns the complement of this set of flags.","","","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","","","Returns the set difference of the two sets of flags.","","","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,2,0,0,0,1,2,1,2,2,1,2,0,2,2,0,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,0,0,0,0,15,15,0,15,9,3,9,3,9,3,9,3,9,3,9,3,9,3,9,3,15,15,3,3,9,3,15,15,15,15,15,15,15,15,9,3,15,19,9,3,15,19,9,3,9,3,15,15,15,9,3,15,15,15,9,3,15,19,9,9,9,3,3,3,15,15,15,15,15,19,9,9,3,3,15,19,15,15,15,15,15,15,15,15,15,15,15,15,15,15,9,3,15,19,15,9,3,9,3,15,15,15,15,15,15,15,15,0,19,15,19,9,3,0,15,15,15,15,19,9,3,15,9,3,15,15,15,15,9,3,15,19,9,3,15,19,9,3,15,19,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[],1],[[],2],[[]],[[]],[[[4,[3]]]],[[1,5],6],[[2,5],6],[[]],[[]],[[2,7,3]],[[]],[[]],[[],8],[[],2],0,[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[7],0,0,[[2,2]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[9],[[],[[4,[12]]]],[12],[[]],[[]],[[]],[[],7],[[],8],0,[7],[[7,13],8],[[7,8]],0,0,0,0,0,0,0,0,0,0,0,[[9,7],9],[[3,7],3],[[9,7]],[[3,7]],[[9,[14,[7]]],9],[[3,[14,[7]]],3],[9,9],[3,3],[[9,[14,[7]]],7],[[3,[14,[7]]],7],[9,7],[3,7],[[9,[14,[7]]],9],[[3,[14,[7]]],3],[9,9],[3,3],[[],15],[[],15],[3,12],[3,12],[9,7],[3,7],[[15,15],15],[[15,15]],[[15,15],15],[[15,15]],[15,7],[15,7],[[15,15],15],[[15,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[3,3],[[9,9],16],[[3,3],16],[15,15],[[15,15],8],[[15,15],8],[[],9],[[],3],[[15,15],15],[[],15],[[],15],[[9,9],8],[[3,3],8],[[15,17]],0,[[9,5],[[10,[18]]]],[[9,5],[[10,[18]]]],[[9,5],[[10,[18]]]],[[3,5],[[10,[18]]]],[[3,5],[[10,[18]]]],[[3,5],[[10,[18]]]],[[15,5],6],[[15,5],6],[[15,5],6],[[15,5],6],[[15,5],6],[[19,5],6],[[]],[7,9],[7,3],[[]],[[]],[[]],[7,[[4,[15]]]],[7,[[4,[15]]]],[7,15],[7,15],[7,15],[7,15],[17,15],[20,[[4,[15]]]],[20,[[4,[15]]]],[[15,15]],[[15,15]],[[15,15],15],[[15,15],8],[[15,15],8],[[]],[[]],[[]],[[]],[15],[[9,[14,[7]]],8],[[3,[14,[7]]],8],[9,8],[3,8],[15,8],[15,8],[15,8],[15,8],0,[15],[15],0,[[],21],0,[15,15],0,[[9,9],[[4,[16]]]],[[3,3],[[4,[16]]]],[9,3],[[15,15]],[[15,15]],[[15,15,8]],[[15,15,8]],0,[[9,7],9],[[3,7],3],[[15,15],15],[[9,7]],[[3,7]],[[15,15]],[[15,15],15],[[15,15]],[[15,15]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[15,15],15],[3,9],[[],22],0,0,0,0,0,0,0,[[],23],[[],24],[[],23],[23,23],[23],[23,23],0,[7]],"c":[],"p":[[3,"TrapFrame"],[3,"TaskContext"],[3,"VirtAddr"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"bool"],[3,"PhysAddr"],[4,"Result"],[3,"TypeId"],[15,"u8"],[6,"IrqHandler"],[8,"Into"],[3,"MemRegionFlags"],[4,"Ordering"],[8,"IntoIterator"],[3,"Error"],[3,"MemRegion"],[15,"str"],[8,"Iterator"],[15,"never"],[15,"u64"],[6,"TimeValue"],[8,"TrapHandler"]]},\
"axio":{"doc":"<code>std</code>-like traits, helpers, and type definitions for core …","t":"NNNNIDNNNNENNNNNNNNNINGIENNNNINLLLLLLLLLLLLLKLLLKLKLLLLLLLLLLLLLAKLLLLLLLLLLKLLLLLLLLLLLLKLLCCCC","n":["Again","AlreadyExists","BadAddress","BadState","BufRead","BufReader","ConnectionRefused","Current","DirectoryNotEmpty","End","Error","InvalidData","InvalidInput","Io","IsADirectory","NoMemory","NotADirectory","NotConnected","NotFound","PermissionDenied","Read","ResourceBusy","Result","Seek","SeekFrom","Start","StorageFull","UnexpectedEof","Unsupported","Write","WriteZero","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","capacity","clone","clone","clone_into","clone_into","consume","consume","eq","eq","fill_buf","fill_buf","flush","fmt","fmt","from","from","from","get_mut","get_ref","has_data_left","into","into","into","into_inner","new","prelude","read","read","read_exact","read_exact","read_line","read_to_end","read_to_end","read_to_string","read_to_string","read_until","rewind","seek","stream_position","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_fmt","BufRead","Read","Seek","Write"],"q":[[0,"axio"],[92,"axio::prelude"]],"d":["Try again, often for non-blocking APIs.","An entity already exists, often a file.","Bad address.","Bad internal state.","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","The connection was refused by the remote server,","Sets the offset to the current position plus the specified …","A non-empty directory was specified where an empty …","Sets the offset to the size of this object plus the …","The error type used by ArceOS.","Data not valid for the operation were encountered.","Invalid parameter/argument.","Input/output error.","The filesystem object is, unexpectedly, a directory.","Not enough space/cannot allocate memory.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","The requested entity is not found.","The operation lacked the necessary privileges to complete.","The <code>Read</code> trait allows for reading bytes from a source.","Device or resource is busy.","A <code>Result</code> type with <code>AxError</code> as the error type.","The <code>Seek</code> trait provides a cursor which can be moved within …","Enumeration of possible methods to seek within an I/O …","Sets the offset to the provided number of bytes.","The underlying storage (typically, a filesystem) is full.","An error returned when an operation could not be completed …","This operation is unsupported or unimplemented.","A trait for objects which are byte-oriented sinks.","An error returned when an operation could not be completed …","","","","","","","","Returns a reference to the internally buffered data.","Returns the number of bytes the internal buffer can hold …","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","Returns the contents of the internal buffer, filling it …","","Flush this output stream, ensuring that all intermediately …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Check if the underlying <code>Read</code> has any data left to be read.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","","","Pull some bytes from this source into the specified …","","","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","","Read all bytes until EOF in this source, placing them into …","","Read all bytes until EOF in this source, appending them to …","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns the current seek position from the start of the …","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Writes a formatted string into this writer, returning any …","","","",""],"i":[1,1,1,1,0,0,1,5,1,5,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,5,1,1,1,0,1,1,3,5,1,3,5,1,3,3,5,1,5,1,19,3,5,1,19,3,20,5,1,3,5,1,3,3,19,3,5,1,3,3,0,6,3,3,6,19,3,6,3,6,19,21,21,21,5,1,3,5,1,3,5,1,3,5,1,20,20,20,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[3],[3,4],[5,5],[1,1],[[]],[[]],[4],[[[3,[6]],4]],[[5,5],7],[[1,1],7],[[],8],[[[3,[6]]],8],[[],8],[[5,9],10],[[1,9],[[12,[11]]]],[[]],[[]],[[]],[3],[3],[[],[[8,[7]]]],[[]],[[]],[[]],[3],[6,[[3,[6]]]],0,[[],[[8,[4]]]],[[[3,[6]]],[[8,[4]]]],[[[3,[6]]],8],[[],8],[13,[[8,[4]]]],[[[3,[6]],[15,[14]]],[[8,[4]]]],[[[15,[14]]],[[8,[4]]]],[[[3,[6]],13],[[8,[4]]]],[13,[[8,[4]]]],[[14,[15,[14]]],[[8,[4]]]],[[],8],[5,[[8,[16]]]],[[],[[8,[16]]]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],17],[[],17],[[],17],[[],[[8,[4]]]],[[],8],[18,8],0,0,0,0],"c":[],"p":[[4,"Error"],[15,"str"],[3,"BufReader"],[15,"usize"],[4,"SeekFrom"],[8,"Read"],[15,"bool"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"String"],[15,"u8"],[3,"Vec"],[15,"u64"],[3,"TypeId"],[3,"Arguments"],[8,"BufRead"],[8,"Write"],[8,"Seek"]]},\
"axlog":{"doc":"","t":"IFOOKKKKOOOFFOO","n":["LogIf","__print_impl","ax_print","ax_println","console_write_str","current_cpu_id","current_task_id","current_time","debug","error","info","init","set_max_level","trace","warn"],"q":[[0,"axlog"]],"d":["Extern interfaces called in this crate.","","","","write a string to the console.","get current CPU ID.","get current task ID.","get current time","Logs a message at the debug level.","Logs a message at the error level.","Logs a message at the info level.","","","Logs a message at the trace level.","Logs a message at the warn level."],"i":[0,0,0,0,7,7,7,7,0,0,0,0,0,0,0],"f":[0,[1],0,0,[2],[[],[[4,[3]]]],[[],[[4,[5]]]],[[],6],0,0,0,[[]],[2],0,0],"c":[],"p":[[3,"Arguments"],[15,"str"],[15,"usize"],[4,"Option"],[15,"u64"],[3,"Duration"],[8,"LogIf"]]},\
"axnet":{"doc":"","t":"SENDSSDDSLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLL","n":["BROADCAST","IpAddr","Ipv4","Ipv4Addr","MULTICAST_ALL_ROUTERS","MULTICAST_ALL_SYSTEMS","SocketAddr","TcpSocket","UNSPECIFIED","accept","addr","as_bytes","as_bytes","bind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","connect","default","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_str","from_str","from_str","hash","hash","hash","init_network","into","into","into","into","into_address","is_broadcast","is_broadcast","is_link_local","is_loopback","is_multicast","is_multicast","is_unicast","is_unicast","is_unspecified","is_unspecified","listen","local_addr","new","new","new","partial_cmp","partial_cmp","partial_cmp","peer_addr","port","prefix_len","recv","send","shutdown","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","v4","version"],"q":[[0,"axnet"]],"d":["The broadcast address.","An internetworking address.","An IPv4 address.","A four-octet IPv4 address.","All multicast-capable routers","All multicast-capable nodes","An internet endpoint address.","","An unspecified address.","","","Return an address as a sequence of octets, in big-endian.","Return an IPv4 address as a sequence of octets, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Construct an IPv4 address from a sequence of octets, in …","Parse a string representation of an IP address.","","Parse a string representation of an IPv4 address.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to an <code>IpAddress</code>.","Query whether the address is the broadcast address.","Query whether the address is the broadcast address.","Query whether the address falls into the “link-local” …","Query whether the address falls into the “loopback” …","Query whether the address is a valid multicast address.","Query whether the address is a multicast address.","Query whether the address is a valid unicast address.","Query whether the address is an unicast address.","Query whether the address falls into the “unspecified” …","Query whether the address falls into the “unspecified” …","","","","Create an endpoint address from given address and port.","Construct an IPv4 address from parts.","","","","","","If <code>self</code> is a CIDR-compatible subnet mask, return …","","","","","","","","","","","","","","","","","","","","","","Create an address wrapping an IPv4 address with the given …","Return the protocol version."],"i":[4,0,3,0,4,4,0,0,4,1,5,3,4,1,1,3,5,4,1,3,5,4,3,5,4,3,5,4,3,5,4,1,4,1,3,5,4,3,3,5,5,4,4,1,3,3,5,5,4,4,3,5,4,3,5,4,0,1,3,5,4,4,3,4,4,4,3,4,3,4,3,4,1,1,1,5,4,3,5,4,1,5,3,1,1,1,3,5,4,3,5,4,1,3,5,4,1,3,5,4,1,3,5,4,3,3],"f":[0,0,0,0,0,0,0,0,0,[1,[[2,[1]]]],0,[3],[4],[[1,5],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[5,5],[4,4],[[]],[[]],[[]],[[3,3],6],[[5,5],6],[[4,4],6],[[1,5],2],[[],4],[1],[[3,3],7],[[5,5],7],[[4,4],7],[[3,8],[[10,[9]]]],[[3,8],[[10,[9]]]],[[5,8],[[10,[9]]]],[[5,8],[[10,[9]]]],[[4,8],[[10,[9]]]],[[4,8],[[10,[9]]]],[[]],[4,3],[[]],[[]],[[],5],[[]],[[],4],[11,[[10,[3]]]],[11,[[10,[5]]]],[11,[[10,[4]]]],[[3,12]],[[5,12]],[[4,12]],[13],[[]],[[]],[[]],[[]],[4,3],[3,7],[4,7],[4,7],[4,7],[3,7],[4,7],[3,7],[4,7],[3,7],[4,7],[1,2],[1,[[2,[5]]]],[[],1],[[3,14],5],[[15,15,15,15],4],[[3,3],[[16,[6]]]],[[5,5],[[16,[6]]]],[[4,4],[[16,[6]]]],[1,[[2,[5]]]],0,[3,[[16,[15]]]],[1,[[2,[17]]]],[1,[[2,[17]]]],[1,2],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],19],[[],19],[[],19],[[],19],[[15,15,15,15],3],[3,20]],"c":[],"p":[[3,"TcpSocket"],[6,"AxResult"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"SocketAddr"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"str"],[8,"Hasher"],[3,"NetDevices"],[15,"u16"],[15,"u8"],[4,"Option"],[15,"usize"],[3,"String"],[3,"TypeId"],[4,"Version"]]},\
"axruntime":{"doc":"","t":"F","n":["rust_main"],"q":[[0,"axruntime"]],"d":[""],"i":[0],"f":[[[1,1],2]],"c":[],"p":[[15,"usize"],[15,"never"]]},\
"axsync":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLCLLLLLLL","n":["Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","from","get_mut","into","into","into_inner","is_locked","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","type_id","type_id"],"q":[[0,"axsync"]],"d":["A mutual exclusion primitive useful for protecting shared …","A guard that provides mutable data access.","","","","","","","","The dropping of the <code>MutexGuard</code> will release the lock it …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","Locks the <code>Mutex</code> and returns a guard that permits access to …","Creates a new <code>Mutex</code> wrapping the supplied data.","","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","",""],"i":[0,0,3,4,3,4,3,4,4,4,3,4,3,4,3,3,4,3,3,3,3,0,3,4,3,4,3,3,4],"f":[0,0,[[]],[[]],[[]],[[]],[[],[[3,[[0,[1,2]]]]]],[[[4,[1]]],1],[[[4,[1]]],1],[[[4,[1]]]],[[[3,[[0,[1,5]]]],6],7],[[[4,[[0,[1,5]]]],6],7],[[]],[[]],[[[3,[1]]],1],[[]],[[]],[3],[[[3,[1]]],8],[[[3,[1]]],[[4,[1]]]],[[],3],0,[[],9],[[],9],[[],9],[[],9],[[[3,[1]]],[[10,[[4,[1]]]]]],[[],11],[[],11]],"c":[],"p":[[8,"Sized"],[8,"Default"],[3,"Mutex"],[3,"MutexGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Result"],[4,"Option"],[3,"TypeId"]]},\
"axtask":{"doc":"","t":"DDLLLLLLLFFLFLLLFFLLLLLLFFFFFLLLLLLLLLLLLF","n":["TaskId","WaitQueue","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","current","current_may_uninit","eq","exit","fmt","from","from","init_scheduler","init_scheduler_secondary","into","into","new","notify_all","notify_one","notify_task","on_timer_tick","run_idle","sleep","sleep_until","spawn","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wait","wait_timeout","wait_timeout_until","wait_until","with_capacity","yield_now"],"q":[[0,"axtask"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Handle periodic timer ticks for task manager, e.g. advance …","","","","","","","","","","","","","","","","",""],"i":[0,0,1,9,1,9,1,1,1,0,0,1,0,1,9,1,0,0,9,1,9,9,9,9,0,0,0,0,0,1,9,1,9,1,9,1,9,9,9,9,9,0],"f":[0,0,[1,2],[[]],[[]],[[]],[[]],[1,1],[[]],0,[[],[[3,[0]]]],[[1,1],4],[5,6],[[1,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[9,4]],[[9,4],4],[[9,4,[11,[[10,[0]]]]],4],[[]],[[],6],[12],[13],[[[0,[14,15]]]],[[]],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[9],[[9,12],4],[[9,12,18],4],[[9,18]],[19,9],[[]]],"c":[],"p":[[3,"TaskId"],[15,"u64"],[4,"Option"],[15,"bool"],[15,"i32"],[15,"never"],[3,"Formatter"],[6,"Result"],[3,"WaitQueue"],[3,"FifoTask"],[3,"Arc"],[3,"Duration"],[6,"TimeValue"],[8,"FnOnce"],[8,"Send"],[4,"Result"],[3,"TypeId"],[8,"Fn"],[15,"usize"]]},\
"capability":{"doc":"","t":"DDSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Cap","CapError","EXECUTE","READ","WRITE","WithCap","access","access_or_err","access_unchecked","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_access","cap","clone","complement","contains","contains","default","difference","empty","empty","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","insert","insert","intersection","intersects","intersects","into","into","into","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","new","not","remove","remove","set","set","sub","sub_assign","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union"],"q":[[0,"capability"]],"d":["Capabilities.","","","","","A wrapper that holds a value with a capability.","Access the inner value with the given capability, or …","Access the inner value with the given capability, or …","Safety","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Check if the inner data can be accessed with the given …","Get the capability.","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","Iterate over enabled flag values.","","Iterate over enabled flag values with their stringified …","Create a new instance with the given capability.","Returns the complement of this set of flags.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[0,0,2,2,2,0,1,1,1,2,2,2,2,2,2,2,2,2,2,1,2,3,1,2,3,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,1,2,3,1,2,3,1,2,3,2],"f":[0,0,0,0,0,0,[[1,2],[[4,[3]]]],[[1,2],4],[1],[[],2],[[],2],[[2,2],2],[[2,2]],[[2,2],2],[[2,2]],[2,5],[2,5],[[2,2],2],[[2,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],6],[1,2],[2,2],[2,2],[[2,2],6],[[2,2],6],[[],2],[[2,2],2],[[],2],[[],2],[[2,7]],[[2,8],9],[[2,8],9],[[2,8],9],[[2,8],9],[[2,8],9],[[3,8],9],[[]],[[]],[[]],[5,[[10,[2]]]],[5,[[10,[2]]]],[5,2],[5,2],[5,2],[5,2],[7,2],[11,[[10,[2]]]],[11,[[10,[2]]]],[[2,2]],[[2,2]],[[2,2],2],[[2,2],6],[[2,2],6],[[]],[[]],[[]],[2],[2,6],[2,6],[2,6],[2,6],[2],0,[2],0,[2,1],[2,2],[[2,2]],[[2,2]],[[2,2,6]],[[2,2,6]],[[2,2],2],[[2,2]],[[2,2],2],[[2,2]],[[2,2]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[],12],[[2,2],2]],"c":[],"p":[[3,"WithCap"],[3,"Cap"],[3,"CapError"],[4,"Result"],[15,"u32"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"str"],[3,"TypeId"]]},\
"driver_block":{"doc":"","t":"IKKKAKKDLLLLLLLLLLLLLLLLL","n":["BlockDriverOps","block_size","flush","num_blocks","ramdisk","read_block","write_block","RamDisk","block_size","borrow","borrow_mut","device_name","device_type","flush","from","from","into","new","num_blocks","read_block","size","try_from","try_into","type_id","write_block"],"q":[[0,"driver_block"],[7,"driver_block::ramdisk"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,9,9,9,0,9,9,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[0,[[],1],[[],2],[[],3],0,[3,2],[3,2],0,[4,1],[[]],[[]],[4,5],[4,6],[4,2],[[],4],[[]],[[]],[1,4],[4,3],[[4,3],2],[4,1],[[],7],[[],7],[[],8],[[4,3],2]],"c":[],"p":[[15,"usize"],[6,"DevResult"],[15,"u64"],[3,"RamDisk"],[15,"str"],[4,"DeviceType"],[4,"Result"],[3,"TypeId"],[8,"BlockDriverOps"]]},\
"driver_common":{"doc":"","t":"NNNINNEGENNNNNNNLLLLLKKLLLLLLLLLLLLL","n":["Again","AlreadyExists","BadState","BaseDriverOps","Block","Char","DevError","DevResult","DeviceType","Display","InvalidParam","Io","Net","NoMemory","ResourceBusy","Unsupported","borrow","borrow","borrow_mut","borrow_mut","clone","device_name","device_type","eq","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"driver_common"]],"d":["Try again, for non-blocking APIs.","An entity already exists.","Bad internal state.","","","","","","","","Invalid parameter/argument.","Input/output error.","","Not enough space/cannot allocate memory (DMA).","Device or resource is busy.","This operation is unsupported or unimplemented.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[6,6,6,0,1,1,0,0,0,1,6,6,1,6,6,6,1,6,1,6,1,9,9,1,1,6,1,6,1,6,1,6,1,6,1,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[],2],[[],1],[[1,1],3],[[1,4],5],[[6,4],5],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8]],"c":[],"p":[[4,"DeviceType"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"DevError"],[4,"Result"],[3,"TypeId"],[8,"BaseDriverOps"]]},\
"driver_display":{"doc":"","t":"IDDLLLLLKMMKLLLLLMKLLKLLLLLLM","n":["DisplayDriverOps","DisplayInfo","FrameBuffer","borrow","borrow","borrow_mut","borrow_mut","clone","fb","fb_base_vaddr","fb_size","flush","fmt","from","from","from_raw_parts_mut","from_slice","height","info","into","into","need_flush","try_from","try_from","try_into","try_into","type_id","type_id","width"],"q":[[0,"driver_display"]],"d":["","","","","","","","","","frame buffer base virtual address","frame buffer size","","","Returns the argument unchanged.","Returns the argument unchanged.","Safety","","visible height","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","visible width"],"i":[0,0,0,2,1,2,1,1,11,1,1,11,1,2,1,2,2,1,11,2,1,11,2,1,2,1,2,1,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,1],[[],2],0,0,[[],3],[[1,4],5],[[]],[[]],[[6,7],2],[[],2],0,[[],1],[[]],[[]],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0],"c":[],"p":[[3,"DisplayInfo"],[3,"FrameBuffer"],[6,"DevResult"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"usize"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"DisplayDriverOps"]]},\
"driver_net":{"doc":"","t":"DIIQQLLKKLLKKKKKKKKLLL","n":["EthernetAddress","NetBuffer","NetDriverOps","RxBuffer","TxBuffer","borrow","borrow_mut","can_recv","can_send","from","into","mac_address","new_tx_buffer","packet","packet_len","packet_mut","receive","recycle_rx_buffer","send","try_from","try_into","type_id"],"q":[[0,"driver_net"]],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,7,7,2,2,7,7,2,2,7,7,8,8,8,7,7,7,2,2,2],"f":[0,0,0,0,0,[[]],[[]],[[],1],[[],1],[[]],[[]],[[],2],[3,4],[[]],[[],3],[[]],[[],4],[[],4],[[],4],[[],5],[[],5],[[],6]],"c":[],"p":[[15,"bool"],[3,"EthernetAddress"],[15,"usize"],[6,"DevResult"],[4,"Result"],[3,"TypeId"],[8,"NetDriverOps"],[8,"NetBuffer"]]},\
"driver_virtio":{"doc":"","t":"NENNDGDIDLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLFLLLLLLLLLLKLLLLLLLLLLLLLLLKLLL","n":["Both","BufferDirection","DeviceToDriver","DriverToDevice","MmioTransport","PhysAddr","VirtIoGpuDev","VirtIoHal","VirtIoNetDev","ack_interrupt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_recv","can_send","clone","clone_into","config_space","device_name","device_name","device_type","device_type","device_type","dma_alloc","dma_dealloc","drop","eq","fb","flush","fmt","fmt","from","from","from","from","info","into","into","into","into","mac_address","max_queue_size","mmio_phys_to_virt","need_flush","new","new_tx_buffer","notify","probe_mmio_device","queue_set","queue_unset","queue_used","read_device_features","receive","recycle_rx_buffer","requires_legacy_layout","send","set_guest_page_size","set_status","share","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","unshare","vendor_id","version","write_driver_features"],"q":[[0,"driver_virtio"]],"d":["The buffer may be read or written by both the device and …","The direction in which a buffer is passed.","The buffer may be read or written by the device, but only …","The buffer may be read or written by the driver, but only …","MMIO Device Register Interface.","A physical address as used for virtio.","","The interface which a particular hardware implementation …","","","","","","","","","","","","","","","","","","","","","Allocates the given number of contiguous physical pages of …","Deallocates the given contiguous physical DMA memory pages.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts a physical address used for MMIO to a virtual …","","Constructs a new VirtIO MMIO transport, or returns an …","","","","","","","","","","","","","","Shares the given memory range with the device, and returns …","","","","","","","","","","","","","","","","Unshares the given memory range from the device and (if …","Gets the vendor ID.","Gets the version of the VirtIO MMIO transport.",""],"i":[6,0,6,6,0,0,0,0,0,1,5,11,6,1,5,11,6,1,5,5,6,6,1,5,11,5,11,1,3,3,1,6,11,11,6,1,5,11,6,1,11,5,11,6,1,5,1,3,11,1,5,1,0,1,1,1,1,5,5,1,5,1,1,3,6,5,11,6,1,5,11,6,1,5,11,5,11,6,1,3,1,1,1],"f":[0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[3,4]]],2],[[[5,[3,4]]],2],[6,6],[[]],[1,[[9,[7,8]]]],[[[5,[3,4]]],10],[[[11,[3,4]]],10],[[[5,[3,4]]],12],[[[11,[3,4]]],12],[1,13],[[14,6]],[[14,[7,[15]],14],16],[1],[[6,6],2],[[[11,[3,4]]],17],[[[11,[3,4]]],18],[[6,19],[[9,[20]]]],[[1,19],[[9,[20]]]],[[]],[[]],[[]],[[]],[[[11,[3,4]]],21],[[]],[[]],[[]],[[]],[[[5,[3,4]]],22],[1,23],[[14,14],[[7,[15]]]],[[[11,[3,4]]],2],[[[7,[24]]],[[9,[1,25]]]],[[[5,[3,4]],14],18],[[1,26]],[[15,14,[27,[12]]],[[27,[1]]]],[[1,26,23,14,14,14]],[[1,26]],[[1,26],2],[1,28],[[[5,[3,4]]],18],[[[5,[3,4]]],18],[1,2],[[[5,[3,4]]],18],[[1,23]],[[1,29]],[[7,6],14],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[4,14],[[18,[[5,[3,4]]]]]],[4,[[18,[[11,[3,4]]]]]],[[],30],[[],30],[[],30],[[],30],[[14,7,6]],[1,23],[1,31],[[1,28]]],"c":[],"p":[[3,"MmioTransport"],[15,"bool"],[8,"VirtIoHal"],[8,"Transport"],[3,"VirtIoNetDev"],[4,"BufferDirection"],[3,"NonNull"],[4,"Error"],[4,"Result"],[15,"str"],[3,"VirtIoGpuDev"],[4,"DeviceType"],[4,"DeviceType"],[15,"usize"],[15,"u8"],[15,"i32"],[3,"FrameBuffer"],[6,"DevResult"],[3,"Formatter"],[3,"Error"],[3,"DisplayInfo"],[3,"EthernetAddress"],[15,"u32"],[3,"VirtIOHeader"],[4,"MmioError"],[15,"u16"],[4,"Option"],[15,"u64"],[3,"DeviceStatus"],[3,"TypeId"],[4,"MmioVersion"]]},\
"handler_table":{"doc":"","t":"GDLLLLLLLLLL","n":["Handler","HandlerTable","borrow","borrow_mut","from","handle","into","new","register_handler","try_from","try_into","type_id"],"q":[[0,"handler_table"]],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[[]],[[1,2],3],[[]],[[],1],[[1,2,4],3],[[],5],[[],5],[[],6]],"c":[],"p":[[3,"HandlerTable"],[15,"usize"],[15,"bool"],[6,"Handler"],[4,"Result"],[3,"TypeId"]]},\
"kernel_guard":{"doc":"RAII wrappers to create a critical section with local IRQs …","t":"IDIDDDQKLLLLLLLLLLLLKLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLL","n":["BaseGuard","IrqSave","KernelGuardIf","NoOp","NoPreempt","NoPreemptIrqSave","State","acquire","acquire","acquire","acquire","acquire","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","disable_preempt","drop","drop","drop","enable_preempt","from","from","from","from","into","into","into","into","new","new","new","new","release","release","release","release","release","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"kernel_guard"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,7,7,4,1,2,3,4,1,2,3,4,1,2,3,8,1,2,3,8,4,1,2,3,4,1,2,3,4,1,2,3,7,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],1],[[],2],[[],3],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6]],"c":[],"p":[[3,"IrqSave"],[3,"NoPreempt"],[3,"NoPreemptIrqSave"],[3,"NoOp"],[4,"Result"],[3,"TypeId"],[8,"BaseGuard"],[8,"KernelGuardIf"]]},\
"lazy_init":{"doc":"","t":"DLLLLLLLLLLLLLLLLL","n":["LazyInit","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","get_mut_unchecked","get_unchecked","init_by","into","is_init","new","try_from","try_get","try_into","type_id"],"q":[[0,"lazy_init"]],"d":["","","","","","","","Returns the argument unchanged.","Safety","Safety","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1],[1],[1],[[[1,[2]],3],4],[[]],[1],[1],[1],[[]],[1,5],[[],1],[[],6],[1,7],[[],6],[[],8]],"c":[],"p":[[3,"LazyInit"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Result"],[4,"Option"],[3,"TypeId"]]},\
"libax":{"doc":"","t":"OAOOAOOAAAAOONNNNIDNNNNENNNNNNNNNINGIENDDNNNINLLLLLLLLLLLLLLLLLKLLLKLKLLLLLLLLLLLLLLLLLLAKLLLLLLLLLLLKFFLLLLLLLLLLLLLLLLLLKLLLIIIIKKKLKLLLLLLKLKLLFFGGCFFDDSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["debug","env","error","info","io","print","println","rand","sync","task","time","trace","warn","Again","AlreadyExists","BadAddress","BadState","BufRead","BufReader","ConnectionRefused","Current","DirectoryNotEmpty","End","Error","InvalidData","InvalidInput","Io","IsADirectory","NoMemory","NotADirectory","NotConnected","NotFound","PermissionDenied","Read","ResourceBusy","Result","Seek","SeekFrom","Start","Stdin","Stdout","StorageFull","UnexpectedEof","Unsupported","Write","WriteZero","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","capacity","clone","clone","clone_into","clone_into","consume","consume","eq","eq","fill_buf","fill_buf","flush","flush","fmt","fmt","from","from","from","from","from","get_mut","get_ref","has_data_left","into","into","into","into","into","into_inner","new","prelude","read","read","read","read_exact","read_exact","read_line","read_to_end","read_to_end","read_to_string","read_to_string","read_until","rewind","seek","stdin","stdout","stream_position","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write","write_all","write_fmt","BufRead","Read","Seek","Write","consume","fill_buf","flush","has_data_left","read","read_exact","read_line","read_to_end","read_to_string","read_until","rewind","seek","stream_position","write","write_all","write_fmt","rand_u32","srand","Mutex","MutexGuard","spin","exit","yield_now","Duration","Instant","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","ZERO","add","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone_into","cmp","default","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","duration_since","elapsed","eq","fmt","from","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","hash","into","into","is_zero","mul","mul_assign","mul_f32","mul_f64","new","now","partial_cmp","saturating_add","saturating_mul","saturating_sub","sub","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","to_owned","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","type_id","type_id"],"q":[[0,"libax"],[13,"libax::io"],[126,"libax::io::prelude"],[146,"libax::rand"],[148,"libax::sync"],[151,"libax::task"],[153,"libax::time"]],"d":["Logs a message at the debug level.","","Logs a message at the error level.","Logs a message at the info level.","","","","","","","","Logs a message at the trace level.","Logs a message at the warn level.","Try again, often for non-blocking APIs.","An entity already exists, often a file.","Bad address.","Bad internal state.","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","The connection was refused by the remote server,","Sets the offset to the current position plus the specified …","A non-empty directory was specified where an empty …","Sets the offset to the size of this object plus the …","The error type used by ArceOS.","Data not valid for the operation were encountered.","Invalid parameter/argument.","Input/output error.","The filesystem object is, unexpectedly, a directory.","Not enough space/cannot allocate memory.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","The requested entity is not found.","The operation lacked the necessary privileges to complete.","The <code>Read</code> trait allows for reading bytes from a source.","Device or resource is busy.","A <code>Result</code> type with <code>AxError</code> as the error type.","The <code>Seek</code> trait provides a cursor which can be moved within …","Enumeration of possible methods to seek within an I/O …","Sets the offset to the provided number of bytes.","","","The underlying storage (typically, a filesystem) is full.","An error returned when an operation could not be completed …","This operation is unsupported or unimplemented.","A trait for objects which are byte-oriented sinks.","An error returned when an operation could not be completed …","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns the number of bytes the internal buffer can hold …","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","Returns the contents of the internal buffer, filling it …","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Check if the underlying <code>Read</code> has any data left to be read.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","","","Pull some bytes from this source into the specified …","","","","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","","Read all bytes until EOF in this source, placing them into …","","Read all bytes until EOF in this source, appending them to …","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Constructs a new handle to the standard input of the …","A handle to the global standard output stream of the …","Returns the current seek position from the start of the …","","","","","","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","","Attempts to write an entire buffer into this writer.","Writes a formatted string into this writer, returning any …","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>Read</code> trait allows for reading bytes from a source.","The <code>Seek</code> trait provides a cursor which can be moved within …","A trait for objects which are byte-oriented sinks.","Tells this buffer that <code>amt</code> bytes have been consumed from …","Returns the contents of the internal buffer, filling it …","Flush this output stream, ensuring that all intermediately …","Check if the underlying <code>Read</code> has any data left to be read.","Pull some bytes from this source into the specified …","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns the current seek position from the start of the …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Writes a formatted string into this writer, returning any …","","","A spin lock that disables kernel preemption and local IRQs …","A guard that provides mutable data access for <code>SpinNoIrq</code>.","","","","A <code>Duration</code> type to represent a span of time, typically …","A measurement of a monotonically nondecreasing clock. …","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","A duration of zero time.","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","Returns the amount of time elapsed from another instant to …","Returns the amount of time elapsed since this instant was …","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this <code>Duration</code> spans no time.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","Creates a new <code>Duration</code> from the specified number of whole …","Returns an instant corresponding to “now”.","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,5,1,5,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,5,0,0,1,1,1,0,1,1,3,13,9,5,1,3,13,9,5,1,3,3,5,1,5,1,34,3,5,1,34,3,35,9,5,1,3,13,9,5,1,3,3,34,3,13,9,5,1,3,3,0,6,3,13,3,6,34,3,6,3,6,34,36,36,0,0,36,5,1,3,13,9,5,1,3,13,9,5,1,3,13,9,5,1,35,9,35,35,0,0,0,0,34,34,35,34,6,6,34,6,6,34,36,36,36,35,35,35,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,30,24,30,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,30,30,24,24,30,24,24,24,24,24,24,24,24,30,24,24,24,24,24,24,24,30,24,24,24,24,24,24,24,24,24,24,24,24,30,24,24,24,30,24,30,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[3,4],[5,5],[1,1],[[]],[[]],[4],[[[3,[6]],4]],[[5,5],7],[[1,1],7],[[],[[8,[1]]]],[[[3,[6]]],[[8,[1]]]],[[],[[8,[1]]]],[9,10],[[5,11],[[8,[12]]]],[[1,11],[[8,[12]]]],[[]],[[]],[[]],[[]],[[]],[3],[3],[[],[[8,[7,1]]]],[[]],[[]],[[]],[[]],[[]],[3],[6,[[3,[6]]]],0,[[],[[8,[4,1]]]],[[[3,[6]]],[[8,[4,1]]]],[13,[[10,[4]]]],[[[3,[6]]],[[8,[1]]]],[[],[[8,[1]]]],[14,[[8,[4,1]]]],[[[3,[6]],[17,[15,16]]],[[8,[4,1]]]],[[[17,[15,16]]],[[8,[4,1]]]],[[[3,[6]],14],[[8,[4,1]]]],[14,[[8,[4,1]]]],[[15,[17,[15,16]]],[[8,[4,1]]]],[[],[[8,[1]]]],[5,[[8,[18,1]]]],[[],13],[[],9],[[],[[8,[18,1]]]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],19],[[],19],[[],19],[[],19],[[],19],[[],[[8,[4,1]]]],[9,[[10,[4]]]],[[],[[8,[1]]]],[20,[[8,[1]]]],0,0,0,0,[4],[[],[[8,[1]]]],[[],[[8,[1]]]],[[],[[8,[7,1]]]],[[],[[8,[4,1]]]],[[],[[8,[1]]]],[14,[[8,[4,1]]]],[[[17,[15,16]]],[[8,[4,1]]]],[14,[[8,[4,1]]]],[[15,[17,[15,16]]],[[8,[4,1]]]],[[],[[8,[1]]]],[5,[[8,[18,1]]]],[[],[[8,[18,1]]]],[[],[[8,[4,1]]]],[[],[[8,[1]]]],[20,[[8,[1]]]],[[],21],[21],0,0,0,[22,23],[[]],0,0,0,0,0,0,0,0,[[24,24],24],[[24,24]],[24,25],[24,25],[24,25],[24,18],[24,26],[24,27],[[]],[[]],[[]],[[]],[[24,24],[[28,[24]]]],[[24,21],[[28,[24]]]],[[24,21],[[28,[24]]]],[[24,24],[[28,[24]]]],[24,24],[[]],[[24,24],29],[[],24],[[24,21],24],[[24,21]],[[24,24],26],[[24,24],27],[[24,26],24],[[24,27],24],[[30,30],24],[30,24],[[24,24],7],[[24,11],[[8,[12]]]],[[]],[[]],[18,24],[18,24],[18,24],[18,24],[26,24],[27,24],[[24,31]],[[]],[[]],[24,7],[[24,21],24],[[24,21]],[[24,26],24],[[24,27],24],[[18,21],24],[[],30],[[24,24],[[28,[29]]]],[[24,24],24],[[24,21],24],[[24,24],24],[[24,24],24],[[24,24]],[24,21],[24,21],[24,21],[32,24],[32,24],[[]],[[],8],[[],8],[26,[[8,[24,33]]]],[27,[[8,[24,33]]]],[[],8],[[],8],[[],19],[[],19]],"c":[],"p":[[4,"Error"],[15,"str"],[3,"BufReader"],[15,"usize"],[4,"SeekFrom"],[8,"Read"],[15,"bool"],[4,"Result"],[3,"Stdout"],[6,"Result"],[3,"Formatter"],[3,"Error"],[3,"Stdin"],[3,"String"],[15,"u8"],[3,"Global"],[3,"Vec"],[15,"u64"],[3,"TypeId"],[3,"Arguments"],[15,"u32"],[15,"i32"],[15,"never"],[3,"Duration"],[15,"u128"],[15,"f32"],[15,"f64"],[4,"Option"],[4,"Ordering"],[3,"Instant"],[8,"Hasher"],[8,"Iterator"],[3,"TryFromFloatSecsError"],[8,"BufRead"],[8,"Write"],[8,"Seek"]]},\
"libax_bindings":{"doc":"","t":"FFFF","n":["ax_panic","ax_print_str","ax_rand_u32","ax_srand"],"q":[[0,"libax_bindings"]],"d":["","","",""],"i":[0,0,0,0],"f":[[[],1],[[2,3],4],[[],5],[5]],"c":[],"p":[[15,"never"],[6,"c_char"],[15,"usize"],[6,"c_int"],[15,"u32"]]},\
"linked_list":{"doc":"","t":"CICCDQIKLLLLLLLKLLLKLLLLLLLLAIDQDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLL","n":["Adapter","AdapterWrapped","Cursor","Links","List","Wrapped","Wrapper","as_ref","back","borrow","borrow_mut","cursor_front","default","drop","from","from_pointer","front","insert_after","into","into_pointer","is_empty","new","pop_front","push_back","remove","try_from","try_into","type_id","unsafe_list","Adapter","Cursor","EntryType","Iterator","Links","List","back","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","current","cursor_back","cursor_front","from","from","from","from","front","insert_after","insert_before","insert_only_entry","into","into","into","into","into_iter","into_iter","is_empty","iter","iter_back","move_next","move_prev","new","new","next","next_back","push_back","push_front","remove","to_links","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"linked_list"],[29,"linked_list::unsafe_list"]],"d":["","A descriptor of wrapped list elements.","","","A linked list.","Specifies which wrapper (e.g., <code>Box</code> and <code>Arc</code>) wraps the list …","Wraps an object to be inserted in a linked list.","Returns a reference to the wrapped object.","Returns the last element of the list, if one exists.","","","Returns a cursor starting on the first (front) element of …","","","Returns the argument unchanged.","Converts the object back from the pointer representation.","Returns the first element of the list, if one exists.","Inserts the given object after <code>existing</code>.","Calls <code>U::from(self)</code>.","Converts the wrapped object into a pointer that represents …","Returns whether the list is empty.","Constructs a new empty linked list.","Removes the element currently at the front of the list and …","Adds the given object to the end (back) of the list.","Removes the given entry.","","","","Intrusive circular doubly-linked lists.","A linked-list adapter.","A list cursor that allows traversing a linked list and …","The type of the enties in the list.","An iterator for the linked list.","Links of a linked list.","An intrusive circular doubly-linked list.","Returns the last element of the list, if one exists.","","","","","","","","","Returns the element the cursor is currently positioned on.","Returns a cursor starting on the last (back) element of …","Returns a cursor starting on the first (front) element of …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first element of the list, if one exists.","Adds the given object after another object already in the …","Adds the given object before another object already in the …","Inserts the only entry to a list.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Determines if the list is empty.","Returns an iterator for the list starting at the first …","Returns an iterator for the list starting at the last …","Moves the cursor to the next element.","Moves the cursor to the previous element.","Constructs a new empty list.","Constructs a new instance of the linked-list links.","","","Adds the given object to the end of the list.","Adds the given object to the beginning of the list.","Removes the given object from the list.","Retrieves the linked list links for the given object.","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,0,15,2,2,2,2,2,2,2,15,2,2,2,15,2,2,2,2,2,2,2,2,0,0,0,9,0,0,0,11,11,12,14,4,11,12,14,4,4,11,11,11,12,14,4,11,11,11,11,11,12,14,4,11,12,11,11,11,4,4,11,14,12,12,11,11,11,9,11,12,14,4,11,12,14,4,11,12,14,4],"f":[0,0,0,0,0,0,0,[[]],[[[2,[1]]],3],[[]],[[]],[[[2,[1]]],[[4,[1]]]],[[],[[2,[1]]]],[[[2,[1]]]],[[]],[5],[[[2,[1]]],3],[[[2,[1]],5]],[[]],[[],5],[[[2,[1]]],6],[[],[[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]]],[[[2,[1]]],3],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,[[[11,[[0,[9,10]]]]],[[3,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[[0,[9,10]]]]],3],[[[11,[[0,[9,10]]]]],[[4,[[0,[9,10]]]]]],[[[11,[[0,[9,10]]]]],[[4,[[0,[9,10]]]]]],[[]],[[]],[[]],[[]],[[[11,[[0,[9,10]]]]],[[3,[5]]]],[[[11,[[0,[9,10]]]],5]],[[[11,[[0,[9,10]]]],5]],[[[11,[[0,[9,10]]]]]],[[]],[[]],[[]],[[]],[[[11,[[0,[9,10]]]]]],[[]],[[[11,[[0,[9,10]]]]],6],[[[11,[[0,[9,10]]]]],[[12,[[0,[9,10]]]]]],[[[11,[[0,[9,10]]]]],13],[[[4,[[0,[9,10]]]]]],[[[4,[[0,[9,10]]]]]],[[],[[11,[[0,[9,10]]]]]],[[],[[14,[10]]]],[[[12,[[0,[9,10]]]]],3],[[[12,[[0,[9,10]]]]],3],[[[11,[[0,[9,10]]]]]],[[[11,[[0,[9,10]]]]]],[[[11,[[0,[9,10]]]]]],[[],14],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8]],"c":[],"p":[[8,"AdapterWrapped"],[3,"List"],[4,"Option"],[3,"Cursor"],[3,"NonNull"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"Adapter"],[8,"Sized"],[3,"List"],[3,"Iterator"],[8,"DoubleEndedIterator"],[3,"Links"],[8,"Wrapper"]]},\
"memory_addr":{"doc":"","t":"RDDLLLLFLLFLLFLLFLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLLLLLLLLLLLL","n":["PAGE_SIZE_4K","PhysAddr","VirtAddr","add","add","add_assign","add_assign","align_down","align_down","align_down","align_down_4k","align_down_4k","align_down_4k","align_offset","align_offset","align_offset","align_offset_4k","align_offset_4k","align_offset_4k","align_up","align_up","align_up","align_up_4k","align_up_4k","align_up_4k","as_mut_ptr","as_ptr","as_usize","as_usize","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","is_aligned","is_aligned","is_aligned","is_aligned_4k","is_aligned_4k","is_aligned_4k","partial_cmp","partial_cmp","sub","sub","sub_assign","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"memory_addr"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,3,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,3,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,1,1,3,3,3,1,1,3,3,1,3,0,1,3,0,1,3,1,3,1,3,1,3,1,3,1,3,1,3],"f":[0,0,0,[[1,2],1],[[3,2],3],[[1,2]],[[3,2]],[[2,[4,[2]]],2],[[1,[4,[2]]],1],[[3,[4,[2]]],3],[2,2],[1,1],[3,3],[[2,[4,[2]]],2],[[1,[4,[2]]],2],[[3,[4,[2]]],2],[2,2],[1,2],[3,2],[[2,[4,[2]]],2],[[1,[4,[2]]],1],[[3,[4,[2]]],3],[2,2],[1,1],[3,3],[3,5],[3,5],[1,2],[3,2],[[]],[[]],[[]],[[]],[1,1],[3,3],[[1,1],6],[[3,3],6],[[],1],[[],3],[[1,1],7],[[3,3],7],[[1,8],9],[[1,8],9],[[1,8],9],[[3,8],9],[[3,8],9],[[3,8],9],[[]],[2,1],[2,3],[[]],[[]],[[]],[[2,[4,[2]]],7],[[1,[4,[2]]],7],[[3,[4,[2]]],7],[2,7],[1,7],[3,7],[[1,1],[[10,[6]]]],[[3,3],[[10,[6]]]],[[1,2],1],[[3,2],3],[[1,2]],[[3,2]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"c":[],"p":[[3,"PhysAddr"],[15,"usize"],[3,"VirtAddr"],[8,"Into"],[15,"u8"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"page_table":{"doc":"","t":"NSSISNDNNNSSEDEIIGSNNNSSSLLKLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKKLLLLLLKKLKLKLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLDGDGLLLLLLLLLLLLLLLLLLLL","n":["AlreadyMapped","DEVICE","EXECUTE","GenericPTE","LEVELS","MappedToHugePage","MappingFlags","NoMemory","NotAligned","NotMapped","PA_MAX_ADDR","PA_MAX_BITS","PageSize","PageTable64","PagingError","PagingIf","PagingMetaData","PagingResult","READ","Size1G","Size2M","Size4K","USER","VA_MAX_BITS","WRITE","all","all","alloc_frame","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","complement","contains","contains","dealloc_frame","difference","drop","empty","empty","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","insert","insert","intersection","intersects","intersects","into","into","into","into","into_iter","is_all","is_all","is_empty","is_empty","is_huge","is_huge","is_present","is_unused","iter","iter","iter_names","iter_names","map","map_region","new_page","new_table","not","paddr","paddr_is_valid","phys_to_virt","query","remove","remove","riscv","root_paddr","set","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","union","unmap","unmap_region","vaddr_is_valid","walk","Sv39MetaData","Sv39PageTable","Sv48MetaData","Sv48PageTable","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"page_table"],[143,"page_table::riscv"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Set this entry to zero.","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","","","Returns the flags of this entry.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","For non-last level translation, returns whether this entry …","","Returns whether this entry flag indicates present.","Returns whether this entry is zero.","","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","","","","","","Returns the complement of this set of flags.","Returns the physical address mapped by this entry.","","","","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","Sv39: Page-Based 39-bit (3 levels) Virtual-Memory System.","","Sv48: Page-Based 48-bit (4 levels) Virtual-Memory System.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[12,1,1,0,7,12,0,12,12,12,7,7,0,0,0,0,0,0,1,5,5,5,1,7,1,1,1,9,1,1,1,1,1,1,1,1,10,12,5,1,10,12,5,1,8,5,1,5,1,1,1,1,9,1,10,1,1,5,1,8,12,5,1,1,1,1,1,10,12,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,12,5,1,1,1,1,1,1,8,5,8,8,1,1,1,1,10,10,8,8,1,8,7,9,10,1,1,0,10,1,1,1,1,1,5,1,1,1,10,12,5,1,10,12,5,1,10,10,12,5,1,1,10,10,7,10,0,0,0,0,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],[[3,[2]]]],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,4],[1,4],[[1,1],1],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[1,1],[[]],[[]],[1,1],[[1,1],6],[[1,1],6],[2],[[1,1],1],[[[10,[7,8,9]]]],[[],1],[[],1],[[5,5],6],[[1,11]],[[],1],[[12,13],14],[[5,13],14],[[1,13],[[16,[15]]]],[[1,13],[[16,[15]]]],[[1,13],[[16,[15]]]],[[1,13],[[16,[15]]]],[[1,13],[[16,[15]]]],[[]],[[]],[[]],[[]],[17,1],[4,[[3,[1]]]],[4,[[3,[1]]]],[4,1],[4,1],[4,1],[4,1],[11,1],[18,[[3,[1]]]],[18,[[3,[1]]]],[[1,1]],[[1,1]],[[1,1],1],[[1,1],6],[[1,1],6],[[]],[[]],[[]],[[]],[1],[1,6],[1,6],[1,6],[1,6],[[],6],[5,6],[[],6],[[],6],[1],[1,19],[1,20],[1],[[[10,[7,8,9]],21,2,5,1],22],[[[10,[7,8,9]],21,2,4,1,6],22],[[2,1,6]],[2],[1,1],[[],2],[4,6],[2,21],[[[10,[7,8,9]],21],22],[[1,1]],[[1,1]],0,[[[10,[7,8,9]]],2],[[1,1,6]],[[1,1,6]],[[1,1],1],[[1,1]],[[1,1],1],[[]],[[]],[[1,1]],[[1,1]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[22,[[10,[7,8,9]]]]]],[[],23],[[],23],[[],23],[[],23],[[1,1],1],[[[10,[7,8,9]],21],22],[[[10,[7,8,9]],21,4],22],[4,6],[[[10,[7,8,9]],4,24],22],0,0,0,0,[[]],[[]],[[]],[[]],[25,25],[26,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],23],[[],23]],"c":[],"p":[[3,"MappingFlags"],[3,"PhysAddr"],[4,"Option"],[15,"usize"],[4,"PageSize"],[15,"bool"],[8,"PagingMetaData"],[8,"GenericPTE"],[8,"PagingIf"],[3,"PageTable64"],[8,"IntoIterator"],[4,"PagingError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"PTEFlags"],[15,"str"],[3,"Iter"],[3,"IterRaw"],[3,"VirtAddr"],[6,"PagingResult"],[3,"TypeId"],[8,"Fn"],[3,"Sv39MetaData"],[3,"Sv48MetaData"]]},\
"page_table_entry":{"doc":"","t":"SSIDSSSLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLKKLKLLALLLLLLLLLLLSSSDSDSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DEVICE","EXECUTE","GenericPTE","MappingFlags","READ","USER","WRITE","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clear","clone","complement","contains","contains","difference","empty","empty","extend","flags","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","insert","insert","intersection","intersects","intersects","into","into_iter","is_all","is_all","is_empty","is_empty","is_huge","is_present","is_unused","iter","iter","iter_names","iter_names","new_page","new_table","not","paddr","remove","remove","riscv","set","set","sub","sub_assign","symmetric_difference","toggle","toggle","try_from","try_into","type_id","union","A","D","G","PTEFlags","R","Rv64PTE","U","V","W","X","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clear","clone","complement","contains","contains","difference","empty","empty","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","insert","insert","intersection","intersects","intersects","into","into","into_iter","is_all","is_all","is_empty","is_empty","is_huge","is_present","is_unused","iter","iter","iter_names","iter_names","new_page","new_table","not","paddr","remove","remove","set","set","sub","sub_assign","symmetric_difference","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union"],"q":[[0,"page_table_entry"],[81,"page_table_entry::riscv"]],"d":["","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","Set this entry to zero.","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","Returns the flags of this entry.","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","For non-last level translation, returns whether this entry …","Returns whether this entry flag indicates present.","Returns whether this entry is zero.","","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","","","","Returns the complement of this set of flags.","Returns the physical address mapped by this entry.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Indicates the virtual page has been read, written, or …","Indicates the virtual page has been written since the last …","Designates a global mapping.","Page-table entry flags.","Whether the page is readable.","Sv39 and Sv48 page table entry.","Whether the page is accessible to user mode.","Whether the PTE is valid.","Whether the page is writable.","Whether the page is executable.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","","Convert from underlying bit representation, preserving all …","","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","","Iterate over enabled flag values.","","","Iterate over enabled flag values with their stringified …","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,1,1,1,1,1,1,1,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,1,1,1,1,14,14,1,14,1,1,0,1,1,1,1,1,1,1,1,1,1,1,7,7,7,0,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,7,13,13,13,7,7,7,7,7,7,7,13,7,7,7,7,7,13,7,7,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,7,7,7,7,7,13,13,13,7,7,7,7,13,13,7,13,7,7,7,7,7,7,7,7,7,7,13,7,13,7,13,7],"f":[0,0,0,0,0,0,0,[[],1],[[],1],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,2],[1,2],[[1,1],1],[[1,1]],[[]],[[]],[[]],[1,1],[1,1],[[1,1],3],[[1,1],3],[[1,1],1],[[],1],[[],1],[[1,4]],[[],1],[[1,5],6],[[1,5],6],[[1,5],6],[[1,5],6],[[1,5],6],[7,1],[[]],[2,[[8,[1]]]],[2,[[8,[1]]]],[2,1],[2,1],[2,1],[2,1],[4,1],[9,[[8,[1]]]],[9,[[8,[1]]]],[[1,1]],[[1,1]],[[1,1],1],[[1,1],3],[[1,1],3],[[]],[1],[1,3],[1,3],[1,3],[1,3],[[],3],[[],3],[[],3],[1],0,0,[1],[[10,1,3]],[10],[1,1],[[],10],[[1,1]],[[1,1]],0,[[1,1,3]],[[1,1,3]],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[[1,1]],[[],11],[[],11],[[],12],[[1,1],1],0,0,0,0,0,0,0,0,0,0,[[],7],[[],7],[[7,7],7],[[7,7]],[[7,7],7],[[7,7]],[7,2],[7,2],[[7,7],7],[[7,7]],[[]],[[]],[[]],[[]],[13],[13,13],[7,7],[[7,7],3],[[7,7],3],[[7,7],7],[[],7],[[],7],[[7,4]],[13,1],[[7,5],6],[[7,5],6],[[7,5],6],[[7,5],6],[[7,5],6],[[13,5],6],[[]],[1,7],[[]],[2,[[8,[7]]]],[2,[[8,[7]]]],[2,7],[2,7],[2,7],[2,7],[4,7],[9,[[8,[7]]]],[9,[[8,[7]]]],[[7,7]],[[7,7]],[[7,7],7],[[7,7],3],[[7,7],3],[[]],[[]],[7],[7,3],[7,3],[7,3],[7,3],[13,3],[13,3],[13,3],0,[7],[7],0,[[10,1,3],13],[10,13],[7,7],[13,10],[[7,7]],[[7,7]],[[7,7,3]],[[7,7,3]],[[7,7],7],[[7,7]],[[7,7],7],[[7,7]],[[7,7]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[7,7],7]],"c":[],"p":[[3,"MappingFlags"],[15,"usize"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"PTEFlags"],[4,"Option"],[15,"str"],[3,"PhysAddr"],[4,"Result"],[3,"TypeId"],[3,"Rv64PTE"],[8,"GenericPTE"]]},\
"percpu":{"doc":"","t":"AXFFFDLLLLLLLLLLL","n":["__priv","def_percpu","get_local_thread_pointer","init","set_local_thread_pointer","NoPreemptGuard","acquire","borrow","borrow_mut","drop","from","into","new","release","try_from","try_into","type_id"],"q":[[0,"percpu"],[5,"percpu::__priv"]],"d":["","","Always returns <code>0</code> for “sp-naive” use.","No effect for “sp-naive” use.","No effect for “sp-naive” use.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],1],[1],[[1,[2,[1]]]],0,[[]],[[]],[[]],[3],[[]],[[]],[[],3],[[]],[[],4],[[],4],[[],5]],"c":[],"p":[[15,"usize"],[4,"Option"],[3,"NoPreemptGuard"],[4,"Result"],[3,"TypeId"]]},\
"ratio":{"doc":"","t":"DLLLLLLLLLLLLLL","n":["Ratio","borrow","borrow_mut","eq","fmt","from","into","inverse","mul_round","mul_trunc","new","try_from","try_into","type_id","zero"],"q":[[0,"ratio"]],"d":["Convert <code>numerator / denominator</code> to <code>mult / (1 &lt;&lt; shift)</code> to …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,1],2],[[1,3],4],[[]],[[]],[1,1],[[1,5],5],[[1,5],5],[[6,6],1],[[],7],[[],7],[[],8],[[],1]],"c":[],"p":[[3,"Ratio"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"scheduler":{"doc":"","t":"IDDDDQKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLL","n":["BaseScheduler","FifoScheduler","FifoTask","RRScheduler","RRTask","SchedItem","add_task","add_task","add_task","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","from","from","from","from","init","init","init","inner","inner","into","into","into","into","new","new","new","new","pick_next_task","pick_next_task","pick_next_task","put_prev_task","put_prev_task","put_prev_task","remove_task","remove_task","remove_task","task_tick","task_tick","task_tick","to_links","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"scheduler"]],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,10,10,1,2,3,1,4,2,3,1,4,2,3,4,3,1,4,2,10,1,2,3,4,3,1,4,2,3,1,4,2,10,1,2,10,1,2,10,1,2,10,1,2,3,3,1,4,2,3,1,4,2,3,1,4,2],"f":[0,0,0,0,0,0,[[]],[1],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[4],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[[]],[[]],[[]],[[]],[[],3],[[],1],[[],4],[[],2],[[],5],[1,5],[2,5],[6],[[1,6]],[[2,6]],[[],5],[1,5],[2,5],[[],6],[1,6],[2,6],[3,[[7,[3]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9]],"c":[],"p":[[3,"FifoScheduler"],[3,"RRScheduler"],[3,"FifoTask"],[3,"RRTask"],[4,"Option"],[15,"bool"],[3,"Links"],[4,"Result"],[3,"TypeId"],[8,"BaseScheduler"]]},\
"slab_allocator":{"doc":"","t":"NDENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLL","n":["BuddyAllocator","Heap","HeapAllocator","Slab1024Bytes","Slab128Bytes","Slab2048Bytes","Slab256Bytes","Slab4096Bytes","Slab512Bytes","Slab64Bytes","add_memory","allocate","available_bytes","borrow","borrow","borrow_mut","borrow_mut","deallocate","from","from","grow","into","into","layout_to_allocator","new","total_bytes","try_from","try_from","try_into","try_into","type_id","type_id","usable_size","used_bytes"],"q":[[0,"slab_allocator"]],"d":["","A fixed size heap backed by multiple slabs with blocks of …","","","","","","","","","Safety","Allocates a chunk of the given size with the given …","","","","","","Frees the given allocation. <code>ptr</code> must be a pointer returned …","Returns the argument unchanged.","Returns the argument unchanged.","Adds memory to the heap. The start address must be valid …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Finds allocator to use based on layout size and alignment","Creates a new heap with the given <code>heap_start_addr</code> and …","","","","","","","","Returns bounds on the guaranteed usable size of a …",""],"i":[6,0,0,6,6,6,6,6,6,6,1,1,1,6,1,6,1,1,6,1,1,6,1,1,1,1,6,1,6,1,6,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,[[1,2,2]],[[1,3],[[5,[2,4]]]],[1,2],[[]],[[]],[[]],[[]],[[1,2,3]],[[]],[[]],[[1,2,2,6]],[[]],[[]],[3,6],[[2,2],1],[1,2],[[],5],[[],5],[[],5],[[],5],[[],7],[[],7],[[1,3]],[1,2]],"c":[],"p":[[3,"Heap"],[15,"usize"],[3,"Layout"],[3,"AllocError"],[4,"Result"],[4,"HeapAllocator"],[3,"TypeId"]]},\
"spinlock":{"doc":"A <code>no_std</code> spin lock implementation, can disable kernel …","t":"DDGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BaseSpinLock","BaseSpinLockGuard","SpinNoIrq","SpinNoIrqGuard","SpinNoPreempt","SpinNoPreemptGuard","SpinRaw","SpinRawGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","force_unlock","from","from","get_mut","into","into","into_inner","is_locked","lock","new","try_from","try_from","try_into","try_into","try_lock","type_id","type_id"],"q":[[0,"spinlock"]],"d":["A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","A spin lock that disables kernel preemption and local IRQs …","A guard that provides mutable data access for <code>SpinNoIrq</code>.","A spin lock that disbales kernel preemption while trying …","A guard that provides mutable data access for <code>SpinNoPreempt</code>…","A raw spin lock that does nothing while trying to lock.","A guard that provides mutable data access for <code>SpinRaw</code>.","","","","","","","","The dropping of the <code>BaseSpinLockGuard</code> will release the …","","","Force unlock this <code>BaseSpinLock</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>BaseSpinLock</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","Locks the <code>BaseSpinLock</code> and returns a guard that permits …","Creates a new <code>BaseSpinLock</code> wrapping the supplied data.","","","","","Try to lock this <code>BaseSpinLock</code>, returning a lock guard if …","",""],"i":[0,0,0,0,0,0,0,0,4,5,4,5,4,5,5,5,4,5,4,4,5,4,4,5,4,4,4,4,4,5,4,5,4,4,5],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[4,[1,[0,[2,3]]]]]],[[[5,[1,2]]],2],[[[5,[1,2]]],2],[[[5,[1,2]]]],[[[4,[1,[0,[2,6]]]],7],8],[[[5,[1,[0,[2,6]]]],7],8],[[[4,[1,2]]]],[[]],[[]],[[[4,[1,2]]],2],[[]],[[]],[[[4,[1]]]],[[[4,[1,2]]],9],[[[4,[1,2]]],[[5,[1,2]]]],[[],[[4,[1]]]],[[],10],[[],10],[[],10],[[],10],[[[4,[1,2]]],[[11,[[5,[1,2]]]]]],[[],12],[[],12]],"c":[],"p":[[8,"BaseGuard"],[8,"Sized"],[8,"Default"],[3,"BaseSpinLock"],[3,"BaseSpinLockGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Result"],[4,"Option"],[3,"TypeId"]]},\
"timer_list":{"doc":"","t":"GIDDLLLLKLLLLLLLLLLLLLLLLLLL","n":["TimeValue","TimerEvent","TimerEventFn","TimerList","borrow","borrow","borrow_mut","borrow_mut","callback","callback","cancel","default","expire_one","from","from","into","into","is_empty","new","new","next_deadline","set","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"timer_list"]],"d":["","","","","","","","","","","Cancel all events that meet the condition.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,4,2,4,2,3,2,4,4,4,4,2,4,2,4,4,2,4,4,4,2,4,2,4,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1],[[2,1]],[[[4,[3]],5]],[[],[[4,[3]]]],[[[4,[3]],1],6],[[]],[[]],[[]],[[]],[[[4,[3]]],7],[[],[[4,[3]]]],[8,2],[[[4,[3]]],[[6,[1]]]],[[[4,[3]],1,3]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"c":[],"p":[[6,"TimeValue"],[3,"TimerEventFn"],[8,"TimerEvent"],[3,"TimerList"],[8,"Fn"],[4,"Option"],[15,"bool"],[8,"FnOnce"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
